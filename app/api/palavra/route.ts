import { NextRequest, NextResponse } from "next/server";

// Armazena palavras j√° usadas (em mem√≥ria)
const palavrasUsadas = new Set<string>();

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const { tema, nivel } = body;

    // Valida√ß√£o b√°sica
    if (!tema) {
      return NextResponse.json(
        { erro: "Tema n√£o fornecido. Inclua um campo 'tema' no corpo da requisi√ß√£o." },
        { status: 400 }
      );
    }

    if (nivel === undefined || nivel < 1 || nivel > 5) {
      return NextResponse.json(
        { erro: "N√≠vel inv√°lido. O campo 'nivel' deve estar entre 1 e 5." },
        { status: 400 }
      );
    }

    // Prompt do sistema
    const systemPrompt = `
      Voc√™ √© uma IA que gera palavras para um jogo da forca.

      Fun√ß√£o:
      - O usu√°rio fornecer√° um tema e um n√≠vel de dificuldade (1 a 5).
      - Voc√™ deve responder com **apenas uma palavra** ou **nome composto** em portugu√™s relacionado ao tema, respeitando a dificuldade.

      Regras:
      1. A resposta deve ser **somente uma palavra** ou um **nome composto com espa√ßos**, como "Acampamento Meio-Sangue" ou "Voc√™ Sabe Quem".
      2. A palavra deve ter **rela√ß√£o direta e clara** com o tema informado.
      3. **N√£o inclua explica√ß√µes, frases, listas ou defini√ß√µes.**
      4. Responda apenas com a palavra, sem aspas, pontua√ß√£o ou qualquer outro texto adicional.
      5. Evite repetir palavras j√° utilizadas anteriormente.
      6. Sempre responda em portugu√™s, tanto os conectivos como os nomes, por exemplo Mundungus Fletcher em portugu√™s √© Mundungo Fletcher.
      7. Escolha a palavra conforme o n√≠vel de dificuldade:
         - N√≠vel 1 ‚Üí Palavras simples, curtas e muito conhecidas.
         - N√≠vel 2 ‚Üí Palavras um pouco mais espec√≠ficas, mas ainda populares.
         - N√≠vel 3 ‚Üí Palavras mais raras, com 2 ou mais s√≠labas, ou nomes compostos m√©dios.
         - N√≠vel 4 ‚Üí Palavras complexas, longas, m√°gicas, cient√≠ficas ou muito espec√≠ficas do tema.
         - N√≠vel 5 ‚Üí Nomes pr√≥prios ou termos extremamente espec√≠ficos, longos ou pouco conhecidos (ex: "Alvo Percival Wulfrico Brian Dumbledore").
    `;

    // Chamada √† API Groq
    const res = await fetch("https://api.groq.com/openai/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${process.env.GROQ_API_KEY}`,
      },
      body: JSON.stringify({
        model: "openai/gpt-oss-120b",
        messages: [
          { role: "system", content: systemPrompt },
          {
            role: "user",
            content: `
              Tema: ${tema}
              N√≠vel de dificuldade: ${nivel}
              Palavras j√° usadas: ${[...palavrasUsadas].join(", ") || "nenhuma"}
            `,
          },
        ],
        temperature: 1,
        top_p: 1,
        max_completion_tokens: 512,
        reasoning_effort: "medium",
      }),
    });

    // Checa se a resposta foi bem-sucedida
    if (!res.ok) {
      const text = await res.text();
      console.error("Erro da API Groq:", text);
      return NextResponse.json(
        {
          erro: `Erro na API Groq (status ${res.status}). Verifique o log para detalhes.`,
          detalhes: text,
        },
        { status: res.status }
      );
    }

    const data = await res.json();

    // Valida estrutura de resposta
    const resposta = data?.choices?.[0]?.message?.content?.trim();
    if (!resposta) {
      return NextResponse.json(
        { erro: "A API Groq n√£o retornou uma resposta v√°lida." },
        { status: 502 }
      );
    }

    // Adiciona √† lista se for nova
    if (!palavrasUsadas.has(resposta.toLowerCase())) {
      palavrasUsadas.add(resposta.toLowerCase());
    }

    return NextResponse.json({ resposta });
  } catch (err: any) {
    console.error("Erro inesperado:", err);

    // üß± Captura de erro gen√©rica
    return NextResponse.json(
      {
        erro: "Ocorreu um erro inesperado ao processar sua solicita√ß√£o.",
        detalhes: err?.message || "Erro desconhecido.",
      },
      { status: 500 }
    );
  }
}
